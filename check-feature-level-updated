#!/usr/bin/env python3
import os
# import sys
from pathlib import Path
import re
import json
import subprocess

def get_build_url_from_environment() -> str:
    server = os.environ["GITHUB_SERVER_URL"]
    repo = os.environ["GITHUB_REPOSITORY"]
    run_id = os.environ["GITHUB_RUN_ID"]
    return f"{server}/{repo}/actions/runs/{run_id}"

def get_pr_changed_files(repo, pr_number, token):
    event_path = os.environ.get("GITHUB_EVENT_PATH")
    if event_path and os.path.exists(event_path):
        with open(event_path, "r") as f:
            event_data = json.load(f)

        changed_files = set()
        for commit in event_data.get("commits", []):
            for file_list in ["added", "modified", "removed"]:
                changed_files.update(commit.get(file_list, []))

        return str(list(changed_files))
    else:
        return "kdjf"
def get_pr_info():
    from urllib.request import Request, urlopen

    GITHUB_TOKEN = os.environ["GITHUB_TOKEN"]
    REPO = os.environ["GITHUB_REPOSITORY"]
    COMMIT = os.environ["GITHUB_SHA"]
    server = os.environ["GITHUB_SERVER_URL"]

    url = f"https://api.github.com/repos/{REPO}/commits/{COMMIT}/pulls"
    headers = {
        "Accept": "application/vnd.github.groot-preview+json",
        "Authorization": f"token {GITHUB_TOKEN}"
    }

    req = Request(url, headers=headers)
    with urlopen(req) as response:
        prs = json.load(response)
    return str(get_pr_changed_files(REPO, prs[0]["number"], GITHUB_TOKEN)) 


def get_changed_api_endpoints() -> list[str]:
    changelog_path = Path("changelog.md")
    feature_level_pattern = re.compile(r"\*\*Feature level \d+\*\*")
    link_pattern = re.compile(r"(\[[^\]]+\]\([^)]+\))")

    current_feature_level_found = False
    endpoints = []

    with open(changelog_path, "r") as file:
        for line in file:
            if re.fullmatch(feature_level_pattern, line.strip()):
                if current_feature_level_found:
                    break
                current_feature_level_found = True
                continue

            if current_feature_level_found and line.strip().startswith("*"):
                for link in link_pattern.findall(line.split(":", 1)[0]):
                    endpoints.append(link)

    return endpoints

if __name__ == "__main__":
    branch = os.environ.get("GITHUB_REF", "unknown branch").split("/")[-1]
    topic = f"{branch} failing"
    build_url = get_pr_info()
    github_actor = os.environ.get("GITHUB_ACTOR", "unknown user")
    
    feature_level = 4
    endpoints = get_changed_api_endpoints()
    topic = f"new feature level: {feature_level}"
    endpoints_string = ",".join([f'{endpoint}' for endpoint in endpoints])
    
    content = f"{build_url} triggered by {github_actor} on branch `{branch}` has updated the API documentation for the following endpoints:."
    print(f"fail=false\ntopic={topic}\ncontent={content}")
