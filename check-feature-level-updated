#!/usr/bin/env python3
import os
import sys
from pathlib import Path
import re
import json
import subprocess

def get_build_url_from_environment() -> str:
    server = os.environ["GITHUB_SERVER_URL"]
    repo = os.environ["GITHUB_REPOSITORY"]
    run_id = os.environ["GITHUB_RUN_ID"]
    return f"{server}/{repo}/actions/runs/{run_id}"

def get_changed_files():
    event_path = os.environ.get("GITHUB_EVENT_PATH")
    if not event_path or not os.path.exists(event_path):
        raise EnvironmentError("GITHUB_EVENT_PATH not set or file missing")

    with open(event_path, "r") as f:
        event = json.load(f)

    before = event.get("before")
    after = event.get("after")

    try:
        result = subprocess.run(
            ["git", "diff", "--quiet", before, after, "--", "testing/new.py"],
            capture_output=True
        )
        return result.returncode == 1
    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"git diff failed: {e.stderr or e}")
        
def get_pr_info():
    from urllib.request import Request, urlopen

    GITHUB_TOKEN = os.environ["GITHUB_TOKEN"]
    REPO = os.environ["GITHUB_REPOSITORY"]
    COMMIT = os.environ["GITHUB_SHA"]
    server = os.environ["GITHUB_SERVER_URL"]

    url = f"https://api.github.com/repos/{REPO}/commits/{COMMIT}/pulls"
    headers = {
        "Accept": "application/vnd.github.groot-preview+json",
        "Authorization": f"token {GITHUB_TOKEN}"
    }

    req = Request(url, headers=headers)
    with urlopen(req) as response:
        prs = json.load(response)
    # return str(get_pr_chakskfsdsnged_files(REPO, prs[0]["number"], GITHUB_TOKEN)) 


def get_changed_api_endpoints() -> list[str]:
    changelog_path = Path("changelog.md")
    feature_level_pattern = re.compile(r"\*\*Feature level \d+\*\*")
    link_pattern = re.compile(r"(\[[^\]]+\]\([^)]+\))")

    current_feature_level_found = False
    endpoints = []

    with open(changelog_path, "r") as file:
        for line in file:
            if re.fullmatch(feature_level_pattern, line.strip()):
                if current_feature_level_found:
                    break
                current_feature_level_found = True
                continue

            if current_feature_level_found and line.strip().startswith("*"):
                for link in link_pattern.findall(line.split(":", 1)[0]):
                    endpoints.append(link)

    return endpoints

if __name__ == "__main__":
    # if not get_changed_files():
    #     print("changelog_changed=false")
    #     sys.exit(0)sdfsfd
    branch = os.environ.get("GITHUB_REF", "unknown branch").split("/")[-1]
    build_url = get_changed_files()
    github_actor = os.environ.get("GITHUB_ACTOR", "unknown user")
    
    feature_level = 4
    endpoints = get_changed_api_endpoints()
    topic = f"new feature level: {feature_level}"
    endpoints_string = ",".join([f'{endpoint}' for endpoint in endpoints])
    
    content = f"vector triggered by {github_actor} on branch `{branch}` has updated the API documentation for the following endpoints:."
    print(f"changelog_changed=true\ntopic={topic}\ncontent={content}")
